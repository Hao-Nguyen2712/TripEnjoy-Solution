@model TripEnjoy.Client.ViewModels.ManageImagesVM
@{
    ViewData["Title"] = $"Manage Images - {Model.PropertyName}";
}

<div class="container-fluid p-4">
    <!-- Page Header -->
    <div class="row">
        <div class="col-12">
            <div class="page-title-box">
                <div class="d-flex align-items-center justify-content-between">            
                    <div>
                        <a asp-controller="Properties" asp-action="Details" asp-route-id="@Model.PropertyId"
                            class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-1"></i>Back to Property
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    <div id="alertContainer"></div>

    <!-- Image Summary Card -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card bg-light">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h6 class="mb-1">Image Gallery Overview</h6>
                            <p class="text-muted mb-0">
                                <i class="fas fa-images me-1"></i>
                                <strong>@Model.TotalImages</strong> image@(Model.TotalImages == 1 ? "" : "s") uploaded
                                @if (Model.HasCoverImage)
                                {
                                    <span class="ms-3">
                                        <i class="fas fa-star text-warning me-1"></i>Cover image set
                                    </span>
                                }
                                else
                                {
                                    <span class="ms-3">
                                        <i class="fas fa-exclamation-triangle text-warning me-1"></i>No cover image set
                                    </span>
                                }
                            </p>
                        </div>
                        <div class="col-md-4 text-md-end">
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                                data-bs-target="#addImageModal">
                                <i class="fas fa-plus me-1"></i>Add New Image
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Images Grid -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-images me-2"></i>Property Images (@Model.TotalImages)
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.Images.Any())
                    {
                        <div class="row" id="imagesGrid">
                            @foreach (var image in Model.Images)
                            {
                                <div class="col-lg-3 col-md-4 col-sm-6 mb-4" data-image-id="@image.Id">
                                    <div class="image-card">
                                        <div class="position-relative">
                                            <img src="@image.ImageUrl" alt="Property Image" class="property-image"
                                                loading="lazy">

                                            <!-- Cover Image Badge -->
                                            @if (image.IsPrimary)
                                            {
                                                <span class="badge bg-warning position-absolute cover-badge">
                                                    <i class="fas fa-star me-1"></i>Cover
                                                </span>
                                            }

                                            <!-- Image Actions Overlay -->
                                            <div class="image-overlay">
                                                <div class="image-actions">
                                                    @if (!image.IsPrimary)
                                                    {
                                                        <button type="button" class="btn btn-sm btn-warning set-cover-btn"
                                                            data-image-id="@image.Id" title="Set as Cover">
                                                            <i class="fas fa-star"></i>
                                                        </button>
                                                    }
                                                    <button type="button" class="btn btn-sm btn-info view-btn"
                                                        data-image-url="@image.ImageUrl" title="View Full Size">
                                                        <i class="fas fa-search-plus"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-danger delete-btn"
                                                        data-image-id="@image.Id" title="Delete Image">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Image Info -->
                                        <div class="image-info">
                                            @if (!string.IsNullOrEmpty(image.Caption))
                                            {
                                                <p class="image-caption">@image.Caption</p>
                                            }
                                            <div class="d-flex justify-content-between align-items-center">
                                                <small class="text-muted">
                                                    Order: @image.DisplayOrder
                                                </small>
                                                <small class="text-muted">
                                                    <i class="fas fa-calendar-alt me-1"></i>
                                                    @image.UploadAt.ToString("MMM dd, yyyy")
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- Empty State -->
                        <div class="text-center py-5">
                            <div class="mb-4">
                                <i class="fas fa-images fa-4x text-muted"></i>
                            </div>
                            <h5 class="text-muted">No Images Yet</h5>
                            <p class="text-muted mb-4">
                                Add some beautiful photos to showcase your property to potential guests.
                            </p>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                                data-bs-target="#addImageModal">
                                <i class="fas fa-plus me-2"></i>Add Your First Image
                            </button>
                        </div>
                    }
                </div>

                @if (Model.Images.Any())
                {
                    <div class="card-footer bg-light">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Tip: The cover image will be the main photo displayed in property listings.
                                </small>
                            </div>
                            <div class="col-md-6 text-md-end">
                                <button type="button" class="btn btn-outline-primary btn-sm" data-bs-toggle="modal"
                                    data-bs-target="#addImageModal">
                                    <i class="fas fa-plus me-1"></i>Add Another Image
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Add Image Modal -->
<div class="modal fade" id="addImageModal" tabindex="-1" aria-labelledby="addImageModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addImageModalLabel">
                    <i class="fas fa-plus me-2"></i>Add New Image
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addImageForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="imageFile" class="form-label">Select Image File <span
                                class="text-danger">*</span></label>
                        <input type="file" class="form-control" id="imageFile" accept="image/*" required>
                        <div class="invalid-feedback"></div>
                        <div class="form-text">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                Select a high-quality image file (JPG, PNG, WebP, GIF). Maximum file size: 10MB.
                            </small>
                        </div>
                    </div>

                    <!-- Hidden fields for Cloudinary data -->
                    <input type="hidden" id="publicId" name="PublicId">
                    <input type="hidden" id="imageUrl" name="ImageUrl">
                    <input type="hidden" id="signature" name="Signature">
                    <input type="hidden" id="timestamp" name="Timestamp">

                 

                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isCover" name="IsCover">
                            <label class="form-check-label" for="isCover">
                                <i class="fas fa-star text-warning me-1"></i>Set as Cover Image
                            </label>
                        </div>
                        <div class="form-text">
                            <small class="text-muted">
                                The cover image will be the main photo displayed in property listings.
                            </small>
                        </div>
                    </div>

                    <!-- Upload Progress -->
                    <div id="uploadProgress" style="display: none;">
                        <div class="mb-3">
                            <label class="form-label">Upload Progress:</label>
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
                                    style="width: 0%" id="progressBar"></div>
                            </div>
                            <small class="text-muted mt-1" id="progressText">Preparing upload...</small>
                        </div>
                    </div>

                    <!-- Image Preview -->
                    <div id="imagePreview" style="display: none;">
                        <div class="mb-3">
                            <label class="form-label">Preview:</label>
                            <div class="text-center">
                                <img id="previewImg" class="img-fluid rounded" style="max-height: 200px;" alt="Preview">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="addImageBtn">
                        <i class="fas fa-plus me-1"></i>Add Image
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Image Viewer Modal -->
<div class="modal fade" id="imageViewerModal" tabindex="-1" aria-labelledby="imageViewerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageViewerModalLabel">Image Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="fullSizeImage" class="img-fluid" alt="Full Size Image">
            </div>
        </div>
    </div>
</div>

@section Styles {
    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.4/dist/sweetalert2.min.css" rel="stylesheet">

    <style>
        .page-title-box {
            padding-bottom: 1.5rem;
            border-bottom: 1px solid #eee;
            margin-bottom: 1.5rem;
        }

        .image-card {
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            overflow: hidden;
            transition: all 0.3s ease;
            background: white;
        }

        .image-card:hover {
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }

        .property-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            display: block;
        }

        .cover-badge {
            top: 10px;
            left: 10px;
            z-index: 2;
        }

        .image-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .image-card:hover .image-overlay {
            opacity: 1;
        }

        .image-actions {
            display: flex;
            gap: 0.5rem;
        }

        .image-actions .btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .image-info {
            padding: 1rem;
        }

        .image-caption {
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
            color: #495057;
        }

        .alert-floating {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            min-width: 300px;
        }

        #imagePreview img {
            border: 2px solid #dee2e6;
        }

        .modal-lg .modal-body img {
            max-width: 100%;
            height: auto;
        }

        /* SweetAlert2 Custom Styling */
        .swal2-popup {
            border-radius: 0.5rem;
            font-family: inherit;
        }

        .swal2-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .swal2-content {
            font-size: 1rem;
        }

        .swal2-confirm {
            border-radius: 0.375rem;
            font-weight: 500;
            padding: 0.5rem 1rem;
        }

        .swal2-cancel {
            border-radius: 0.375rem;
            font-weight: 500;
            padding: 0.5rem 1rem;
        }

        .swal2-toast {
            border-radius: 0.5rem;
        }

        .swal2-toast .swal2-title {
            font-size: 1rem;
            margin: 0.5rem 0;
        }

        /* Disable all SweetAlert animations and wobble effects */
        .swal2-noanimation {
            animation: none !important;
            transform: none !important;
        }
        
        .swal2-popup.swal2-noanimation {
            animation: none !important;
            transform: none !important;
        }
        
        .swal2-backdrop.swal2-noanimation {
            animation: none !important;
        }
        
        /* Disable any potential wobble or shake animations */
        .swal2-popup {
            animation: none !important;
        }
        
        .swal2-container {
            animation: none !important;
        }
    </style>
}

@section Scripts {
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.4/dist/sweetalert2.all.min.js"></script>

    <script>
        $(document).ready(function () {
            // Property ID from model
            const propertyId = '@Model.PropertyId';

            // Character counter for caption
            $('#imageCaption').on('input', function () {
                const length = $(this).val().length;
                $('#captionCounter').text(length);

                if (length > 500) {
                    $(this).addClass('is-invalid');
                } else {
                    $(this).removeClass('is-invalid');
                }
            });

            // File upload handling
            $('#imageFile').on('change', function () {
                const file = this.files[0];
                const $fileInput = $(this);

                // Reset validation states
                $fileInput.removeClass('is-invalid is-valid');
                $('.invalid-feedback').text('');
                $('#imagePreview').hide();

                if (file) {
                    // Validate file type
                    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
                    if (!allowedTypes.includes(file.type)) {
                        $fileInput.addClass('is-invalid');
                        $fileInput.next('.invalid-feedback').text('Please select a valid image file (JPG, PNG, WebP, GIF).');
                        return;
                    }

                    // Validate file size (10MB)
                    if (file.size > 10 * 1024 * 1024) {
                        $fileInput.addClass('is-invalid');
                        $fileInput.next('.invalid-feedback').text('File size must be less than 10MB.');
                        return;
                    }

                    // File is valid
                    $fileInput.addClass('is-valid');

                    // Show preview
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        $('#previewImg').attr('src', e.target.result);
                        $('#imagePreview').show();

                        // Update file info
                        const fileSizeMB = (file.size / (1024 * 1024)).toFixed(2);
                        const fileInfo = `${file.name} (${fileSizeMB} MB)`;
                        $fileInput.next('.invalid-feedback').removeClass('invalid-feedback').addClass('valid-feedback text-success').text(`✓ ${fileInfo}`);
                    };
                    reader.onerror = function () {
                        $fileInput.addClass('is-invalid');
                        $fileInput.next('.invalid-feedback').text('Error reading file. Please try selecting the file again.');
                    };
                    reader.readAsDataURL(file);
                } else {
                    $('#imagePreview').hide();
                }
            });

            // Add image form submission
            $('#addImageForm').on('submit', function (e) {
                e.preventDefault();

                const fileInput = $('#imageFile')[0];
                if (!fileInput.files[0]) {
                    showAlert('danger', 'Please select an image file.');
                    return;
                }

                const file = fileInput.files[0];
                const caption = $('#imageCaption').val();
                const isCover = $('#isCover').is(':checked');

                const submitBtn = $('#addImageBtn');
                const originalText = submitBtn.html();

                // Show progress and disable form
                $('#uploadProgress').show();
                submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Uploading...');
                $('.modal-body input, .modal-body button').prop('disabled', true);

                uploadImageToCloudinary(file, caption, isCover)
                    .then(() => {
                        updateProgress(100, 'Upload completed successfully!');
                        showAlert('success', 'Image uploaded successfully!');
                        setTimeout(() => {
                            $('#addImageModal').modal('hide');
                            location.reload();
                        }, 1500);
                    })
                    .catch((error) => {
                        console.error('Upload failed:', error);
                        updateProgress(0, 'Upload failed');
                        showAlert('danger', error.message || 'Failed to upload image. Please try again.');
                    })
                    .finally(() => {
                        setTimeout(() => {
                            submitBtn.prop('disabled', false).html(originalText);
                            $('.modal-body input, .modal-body button').prop('disabled', false);
                            $('#uploadProgress').hide();
                        }, 2000);
                    });
            });

            // Set cover image
            $(document).on('click', '.set-cover-btn', function () {
                const imageId = $(this).data('image-id');
                const btn = $(this);

                Swal.fire({
                    title: 'Set Cover Image',
                    text: 'Set this image as the cover image for your property?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#ffc107',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-star me-1"></i>Yes, set as cover',
                    cancelButtonText: 'Cancel',
                    reverseButtons: true,
                    showClass: {
                        popup: 'swal2-noanimation',
                        backdrop: 'swal2-noanimation'
                    },
                    hideClass: {
                        popup: '',
                        backdrop: ''
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        btn.prop('disabled', true);

                        $.ajax({
                            url: '@Url.Action("SetCoverImage", "Properties")',
                            type: 'POST',
                            data: {
                                propertyId: propertyId,
                                imageId: imageId,
                                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire({
                                        title: 'Success!',
                                        text: response.message,
                                        icon: 'success',
                                        timer: 2000,
                                        showConfirmButton: false,
                                        showClass: {
                                            popup: 'swal2-noanimation',
                                            backdrop: 'swal2-noanimation'
                                        },
                                        hideClass: {
                                            popup: '',
                                            backdrop: ''
                                        }
                                    }).then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: response.message,
                                        icon: 'error',
                                        showClass: {
                                            popup: 'swal2-noanimation',
                                            backdrop: 'swal2-noanimation'
                                        },
                                        hideClass: {
                                            popup: '',
                                            backdrop: ''
                                        }
                                    });
                                    btn.prop('disabled', false);
                                }
                            },
                            error: function () {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An error occurred while setting the cover image.',
                                    icon: 'error',
                                    showClass: {
                                        popup: 'swal2-noanimation',
                                        backdrop: 'swal2-noanimation'
                                    },
                                    hideClass: {
                                        popup: '',
                                        backdrop: ''
                                    }
                                });
                                btn.prop('disabled', false);
                            }
                        });
                    }
                });
            });

            // Delete image
            $(document).on('click', '.delete-btn', function (e) {
                e.preventDefault(); // Prevent any default behavior

                const imageId = $(this).data('image-id');
                const imageCard = $(this).closest('[data-image-id]');

                console.log('Delete button clicked for image:', imageId);
                console.log('Found image card:', imageCard.length > 0 ? 'Yes' : 'No');
                console.log('Image card element:', imageCard[0]);

                Swal.fire({
                    title: 'Delete Image?',
                    text: 'Are you sure you want to delete this image? This action cannot be undone.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-trash me-1"></i>Yes, delete it',
                    cancelButtonText: 'Cancel',
                    reverseButtons: true,
                    showLoaderOnConfirm: true,
                    showClass: {
                        popup: 'swal2-noanimation',
                        backdrop: 'swal2-noanimation'
                    },
                    hideClass: {
                        popup: '',
                        backdrop: ''
                    },
                    preConfirm: () => {
                        const btn = $(this);
                        btn.prop('disabled', true);
                        btn.html('<i class="fas fa-spinner fa-spin"></i>');

                        return $.ajax({
                            url: '@Url.Action("DeleteImage", "Properties")',
                            type: 'POST',
                            data: {
                                propertyId: propertyId,
                                imageId: imageId,
                                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                            }
                        }).then(response => {
                            console.log('Delete response received:', response);

                            if (response && response.success) {
                                console.log('Delete successful, removing image card');
                                return response;
                            } else {
                                console.log('Delete failed:', response?.message || 'Unknown error');
                                throw new Error(response?.message || 'Failed to delete image.');
                            }
                        }).catch(error => {
                            console.error('Delete request failed:', error);
                            btn.prop('disabled', false);
                            btn.html('<i class="fas fa-trash"></i>');
                            throw error;
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed && result.value) {
                        Swal.fire({
                            title: 'Deleted!',
                            text: result.value.message || 'Image has been deleted successfully.',
                            icon: 'success',
                            timer: 1500,
                            showConfirmButton: false,
                            showClass: {
                                popup: 'swal2-noanimation',
                                backdrop: 'swal2-noanimation'
                            },
                            hideClass: {
                                popup: '',
                                backdrop: ''
                            }
                        }).then(() => {
                            // Always reload the page after successful deletion
                            console.log('Image deleted successfully, reloading page...');
                            location.reload();
                        });
                    }
                }).catch((error) => {
                    if (error !== 'cancel') {  // Don't show error if user cancelled
                        Swal.fire({
                            title: 'Error!',
                            text: error.message || 'An error occurred while deleting the image.',
                            icon: 'error',
                            showClass: {
                                popup: 'swal2-noanimation',
                                backdrop: 'swal2-noanimation'
                            },
                            hideClass: {
                                popup: '',
                                backdrop: ''
                            }
                        });
                    }
                });
            });

            // View full size image
            $(document).on('click', '.view-btn', function () {
                const imageUrl = $(this).data('image-url');
                $('#fullSizeImage').attr('src', imageUrl);
                $('#imageViewerModal').modal('show');
            });

            // Reset form when modal is hidden
            $('#addImageModal').on('hidden.bs.modal', function () {
                $('#addImageForm')[0].reset();
                $('#imagePreview').hide();
                $('#uploadProgress').hide();
                $('#captionCounter').text('0');
                $('.form-control').removeClass('is-invalid is-valid');
                $('.invalid-feedback, .valid-feedback').text('').removeClass('text-success');
                $('.modal-body input, .modal-body button').prop('disabled', false);
                $('#addImageBtn').html('<i class="fas fa-plus me-1"></i>Add Image');
                updateProgress(0, 'Preparing upload...');
            });

            // Helper functions
            function isValidUrl(string) {
                try {
                    new URL(string);
                    return true;
                } catch (_) {
                    return false;
                }
            }

            function showAlert(type, message) {
                const iconMap = {
                    'success': 'success',
                    'danger': 'error',
                    'warning': 'warning',
                    'info': 'info'
                };

                const titleMap = {
                    'success': 'Success!',
                    'danger': 'Error!',
                    'warning': 'Warning!',
                    'info': 'Information'
                };

                Swal.fire({
                    title: titleMap[type] || 'Notification',
                    text: message,
                    icon: iconMap[type] || 'info',
                    timer: type === 'success' ? 3000 : 5000,
                    showConfirmButton: type !== 'success',
                    toast: true,
                    position: 'top-end',
                    showCloseButton: true,
                    showClass: {
                        popup: 'swal2-noanimation',
                        backdrop: 'swal2-noanimation'
                    },
                    hideClass: {
                        popup: '',
                        backdrop: ''
                    }
                });
            }

            function updateImageCount() {
                const currentCount = $('#imagesGrid [data-image-id]').length;
                console.log('Updated image count:', currentCount);

                // Update any count displays if needed
                const countDisplay = $('.image-count');
                if (countDisplay.length > 0) {
                    countDisplay.text(currentCount + ' image' + (currentCount !== 1 ? 's' : ''));
                }

                // If no images left, you might want to show an empty state
                if (currentCount === 0) {
                    $('#imagesGrid').append(`
                            <div class="col-12 text-center py-5">
                                <div class="empty-state">
                                    <i class="fas fa-images fa-3x text-muted mb-3"></i>
                                    <h5 class="text-muted">No images uploaded yet</h5>
                                    <p class="text-muted">Upload some images to showcase your property</p>
                                </div>
                            </div>
                        `);
                }
            }

            // Progress update function
            function updateProgress(percentage, message) {
                $('#progressBar').css('width', percentage + '%').attr('aria-valuenow', percentage);
                $('#progressText').text(message);
            }

            // Cloudinary upload function
            async function uploadImageToCloudinary(file, caption, isCover) {
                console.log('=== STARTING CLOUDINARY UPLOAD ===');
                console.log('File details:', {
                    name: file.name,
                    size: file.size,
                    type: file.type
                });
                console.log('Upload parameters:', { caption, isCover, propertyId });

                try {
                    updateProgress(10, 'Requesting upload permissions...');

                    // Step 1: Get upload URL and parameters from server
                    console.log('Step 1: Requesting upload URL...');
                    const uploadUrlResponse = await $.ajax({
                        url: '@Url.Action("GenerateImageUploadUrl", "Properties")',
                        type: 'POST',
                        data: {
                            propertyId: propertyId,
                            fileName: file.name,
                            caption: caption,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        }
                    });

                    console.log('Upload URL response received:', uploadUrlResponse);
                    console.log('Response type:', typeof uploadUrlResponse);
                    console.log('Response keys:', Object.keys(uploadUrlResponse || {}));
                    console.log('Response data:', uploadUrlResponse?.data);
                    console.log('Upload parameters type:', typeof uploadUrlResponse?.data?.uploadParameters);
                    console.log('Upload parameters:', uploadUrlResponse?.data?.uploadParameters);

                    if (!uploadUrlResponse || !uploadUrlResponse.success) {
                        console.error('Upload URL request failed:', uploadUrlResponse);
                        throw new Error(uploadUrlResponse?.message || 'Failed to generate upload URL');
                    }

                    updateProgress(25, 'Upload permissions received. Uploading to cloud...');
                    const uploadParams = uploadUrlResponse.data;
                    console.log('Upload parameters received:', uploadParams);

                    // Validate the upload parameters structure
                    if (!uploadParams || !uploadParams.uploadUrl || !uploadParams.uploadParameters) {
                        console.error('Invalid upload parameters:', uploadParams);
                        throw new Error('Invalid upload parameters received from server');
                    }

                    let uploadUrl = uploadParams.uploadUrl;
                    let uploadParameters = uploadParams.uploadParameters;

                    console.log('Upload URL:', uploadUrl);
                    console.log('Upload parameters:', uploadParameters);

                    if (typeof uploadUrl !== 'string' || !uploadParameters || typeof uploadParameters !== 'object') {
                        console.error('Invalid parameter types - URL:', typeof uploadUrl, 'Parameters:', typeof uploadParameters);
                        throw new Error('Invalid upload parameter types received from server');
                    }

                    // Step 2: Upload to Cloudinary
                    console.log('Step 2: Preparing Cloudinary upload...');
                    const formData = new FormData();

                    // Add all upload parameters
                    if (uploadParameters && typeof uploadParameters === 'object') {
                        console.log('Adding upload parameters to FormData...');
                        Object.entries(uploadParameters).forEach(([key, value]) => {
                            // Override resource_type for image uploads to ensure proper handling
                            if (key === 'resource_type') {
                                console.log(`Overriding parameter: ${key} = image (was ${value})`);
                                formData.append(key, 'image');
                            } else {
                                console.log(`Adding parameter: ${key} = ${value}`);
                                formData.append(key, value);
                            }
                        });
                    } else {
                        console.error('No valid upload parameters found');
                        throw new Error('No valid upload parameters available');
                    }

                    // Add the file
                    formData.append('file', file);
                    console.log('File added to FormData');

                    // Log FormData contents
                    console.log('FormData entries:');
                    for (let pair of formData.entries()) {
                        console.log(`${pair[0]}: ${pair[1]}`);
                    }

                    updateProgress(40, 'Uploading image...');
                    console.log('Uploading to Cloudinary URL:', uploadUrl);

                    // For image uploads, we need to use the /image/upload endpoint
                    if (uploadUrl.includes('/auto/upload')) {
                        uploadUrl = uploadUrl.replace('/auto/upload', '/image/upload');
                        console.log('Corrected upload URL for images:', uploadUrl);
                    }

                    const cloudinaryResponse = await fetch(uploadUrl, {
                        method: 'POST',
                        body: formData
                    });

                    console.log('Cloudinary response status:', cloudinaryResponse.status);
                    console.log('Cloudinary response ok:', cloudinaryResponse.ok);

                    if (!cloudinaryResponse.ok) {
                        const errorText = await cloudinaryResponse.text();
                        console.error('Cloudinary error response:', errorText);
                        throw new Error(`Upload failed: ${cloudinaryResponse.status} ${cloudinaryResponse.statusText}`);
                    }

                    const cloudinaryResult = await cloudinaryResponse.json();
                    console.log('Cloudinary result:', cloudinaryResult);

                    if (cloudinaryResult.error) {
                        console.error('Cloudinary result error:', cloudinaryResult.error);
                        throw new Error(`Cloudinary error: ${cloudinaryResult.error.message}`);
                    }

                    updateProgress(70, 'Image uploaded. Finalizing...');

                    // Step 3: Send upload confirmation to our API
                    console.log('Step 3: Saving to database...');

                    // Validate required Cloudinary response data
                    if (!cloudinaryResult.public_id || !cloudinaryResult.secure_url) {
                        console.error('Missing required data from Cloudinary:', cloudinaryResult);
                        throw new Error('Incomplete response from Cloudinary upload');
                    }

                    // Fix the Cloudinary URL to ensure it's a proper image URL
                    let imageUrl = cloudinaryResult.secure_url;
                    if (imageUrl.includes('/auto/upload/')) {
                        imageUrl = imageUrl.replace('/auto/upload/', '/image/upload/');
                        console.log('Corrected image URL:', imageUrl);
                    }

                    const saveData = {
                        propertyId: propertyId,
                        PublicId: cloudinaryResult.public_id,
                        ImageUrl: imageUrl,
                        Signature: cloudinaryResult.signature || uploadParameters.signature,
                        Timestamp: cloudinaryResult.timestamp || uploadParameters.timestamp,
                        IsCover: isCover,
                        Caption: caption,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    };
                    console.log('Save data:', saveData);
                    console.log('Cloudinary result for reference:', cloudinaryResult);

                    // Validate all required fields before sending
                    const requiredFields = ['PublicId', 'ImageUrl', 'Signature', 'Timestamp'];
                    for (const field of requiredFields) {
                        if (!saveData[field]) {
                            console.error(`Missing required field: ${field}`, saveData);
                            throw new Error(`Missing required field: ${field}`);
                        }
                    }

                    const addImageResponse = await $.ajax({
                        url: '@Url.Action("AddImage", "Properties")',
                        type: 'POST',
                        data: saveData
                    });

                    console.log('Add image response:', addImageResponse);

                    if (!addImageResponse || !addImageResponse.success) {
                        console.error('Add image failed:', addImageResponse);
                        throw new Error(addImageResponse?.message || 'Failed to save image to database');
                    }

                    updateProgress(100, 'Image saved successfully!');
                    console.log('=== UPLOAD COMPLETED SUCCESSFULLY ===');
                    return addImageResponse;

                } catch (error) {
                    console.error('Upload error details:', error);
                    console.error('Error type:', typeof error);
                    console.error('Error properties:', Object.keys(error));

                    // Provide more specific error messages
                    let errorMessage = 'An unexpected error occurred during upload.';

                    // Handle jQuery AJAX errors
                    if (error.status) {
                        console.error('HTTP Status:', error.status);
                        console.error('Response Text:', error.responseText);

                        if (error.status === 413) {
                            errorMessage = 'File is too large. Please select a smaller image.';
                        } else if (error.status === 422) {
                            errorMessage = 'Invalid file format. Please select a valid image file.';
                        } else if (error.status === 403) {
                            errorMessage = 'Upload not authorized. Please try refreshing the page.';
                        } else if (error.status === 400) {
                            errorMessage = 'Bad request. Please check your file and try again.';
                        } else if (error.status === 500) {
                            errorMessage = 'Server error. Please try again later.';
                        } else if (error.responseText) {
                            try {
                                const errorData = JSON.parse(error.responseText);
                                errorMessage = errorData.message || `Server error (${error.status})`;
                            } catch (parseError) {
                                errorMessage = `Server error (${error.status}): ${error.responseText}`;
                            }
                        }
                    } else if (error.message) {
                        console.error('Error message:', error.message);
                        errorMessage = error.message;
                    } else if (typeof error === 'string') {
                        errorMessage = error;
                    }

                    // Add more context to the error message
                    errorMessage += ` (Please check the browser console for more details)`;

                    throw new Error(errorMessage);
                }
            }
        });
    </script>
}