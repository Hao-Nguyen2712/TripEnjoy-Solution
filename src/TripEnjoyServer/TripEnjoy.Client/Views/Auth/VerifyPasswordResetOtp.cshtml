@model TripEnjoy.Client.ViewModels.VerifyPasswordResetOtpVM

@{
    Layout = "_AuthLayout";
    ViewData["Title"] = "Verify Reset Code";
}

@section Styles {
    <style>
        .otp-input-container { display: flex; justify-content: center; gap: 10px; }
        .otp-input { width: 50px; height: 60px; text-align: center; font-size: 24px; border: 1px solid #ced4da; border-radius: .25rem; -moz-appearance: textfield; }
        .otp-input::-webkit-outer-spin-button, .otp-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
        #resend-otp.disabled { color: #6c757d; pointer-events: none; text-decoration: none; }
    </style>
}

<div class="tg-login-area pt-130 pb-130">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-xl-6 col-lg-8 col-md-10">
                <div class="tg-login-wrapper">
                    <div class="tg-login-top text-center mb-30">
                        <h2>Enter Verification Code</h2>
                        <p>We've sent a 6-digit verification code to <br> <strong>@Model.Email</strong></p>
                    </div>
                    <div class="tg-login-form">
                        <div class="tg-tour-about-review-form">
                            <form id="verify-otp-form" asp-action="VerifyPasswordResetOtp" method="post">
                                <input asp-for="Email" type="hidden" />
                                <input asp-for="Otp" type="hidden" />
                               
                                <div class="row">
                                    <div class="col-lg-12 mb-35">
                                        <div class="otp-input-container">
                                            <input type="text" class="otp-input" maxlength="1" autofocus>
                                            <input type="text" class="otp-input" maxlength="1">
                                            <input type="text" class="otp-input" maxlength="1">
                                            <input type="text" class="otp-input" maxlength="1">
                                            <input type="text" class="otp-input" maxlength="1">
                                            <input type="text" class="otp-input" maxlength="1">
                                        </div>
                                    </div>
                                    <div class="col-lg-12">
                                        <button id="verify-btn" type="submit" class="tg-btn w-100">Verify</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                         <div class="text-center mt-20">
                            Didn't receive the code? 
                            <a href="#" id="resend-otp">Resend</a>
                            <span id="countdown-timer" class="ms-2"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Reusing the exact same logic from the login OTP verification page.
            // Notyf, OTP input handling, countdown timer, and resend logic.
            const notyf = new Notyf({
                duration: 5000,
                position: { x: 'right', y: 'top' },
                types: [{ type: 'error', background: 'indianred', dismissible: true }]
            });

            var errorMessages = @Html.Raw(TempData["ErrorMessages"] != null ? TempData["ErrorMessages"] : "[]");
            if (errorMessages.length > 0) {
                errorMessages.forEach(function(message) {
                    notyf.error(message);
                });
            }

            const inputs = $(".otp-input");
            const otpHiddenInput = $("#Otp");

            inputs.on('input', function (e) {
                this.value = this.value.replace(/[^0-9]/g, '');
                if (this.value && $(this).next('.otp-input').length) {
                    $(this).next('.otp-input').focus();
                }
                updateOtpValue();
            });

            inputs.on('keydown', function (e) {
                if (e.key === "Backspace" && !this.value) {
                    $(this).prev('.otp-input').focus();
                }
            });
            
            function updateOtpValue() {
                otpHiddenInput.val(Array.from(inputs).map(i => $(i).val()).join(''));
            }

            $('#verify-otp-form').on('submit', function(e) {
                let isFilled = Array.from(inputs).every(input => $(input).val() !== '');
                if (isFilled) {
                    $('#verify-btn').prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Verifying...');
                } else {
                    e.preventDefault();
                    notyf.error("Please fill all OTP fields.");
                }
            });

            const countdownElement = $('#countdown-timer');
            const resendLink = $('#resend-otp');
            const fiveMinutes = 5 * 60;
            let otpExpiryTime = localStorage.getItem('otpExpiryTime-reset');

            if (!otpExpiryTime) {
                otpExpiryTime = new Date().getTime() + fiveMinutes * 1000;
                localStorage.setItem('otpExpiryTime-reset', otpExpiryTime);
            }

            function updateCountdown() {
                const distance = otpExpiryTime - new Date().getTime();
                if (distance < 0) {
                    clearInterval(timerInterval);
                    countdownElement.text("");
                    resendLink.removeClass('disabled');
                    localStorage.removeItem('otpExpiryTime-reset');
                    return;
                }
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);
                countdownElement.text(`(${minutes}:${seconds.toString().padStart(2, '0')})`);
                resendLink.addClass('disabled');
            }
            const timerInterval = setInterval(updateCountdown, 1000);
            updateCountdown();

            resendLink.on('click', function(e){
                e.preventDefault();
                if(!$(this).hasClass('disabled')){
                    // This should call the forgot-password endpoint again to resend.
                    // For simplicity, we just reload to restart timer.
                    $.ajax({
                        url: '/auth/forgot-password', // Note: This calls the endpoint to SEND the OTP, not resend.
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ email: '@Model.Email' }),
                        success: function(response) {
                            notyf.success("A new OTP has been sent.");
                            localStorage.removeItem('otpExpiryTime-reset');
                            window.location.reload();
                        },
                        error: function(xhr) {
                            notyf.error(xhr.responseJSON?.message || 'An unexpected error occurred.');
                        }
                    });
                }
            });
        });
    </script>
}
